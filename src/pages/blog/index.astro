---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import { Image } from "astro:assets";

const raw = await getCollection("blog");
const posts = raw
  .filter(p => !p.data.draft)
  .sort((a,b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const [featured, ...rest] = posts;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Blog – ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <style>
      :root {
        --blog-max: 1180px;
        --card-radius: 18px;
      }

      body {
        margin:0;
        background:var(--color-bg);
        color:var(--color-text);
        font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif;
      }

      main.blog {
        max-width:var(--blog-max);
        margin:0 auto;
        padding:2.8rem 1.2rem 4.5rem;
      }

      .section-head {
        text-align:center;
        margin:0 0 2.6rem;
      }
      .section-head h1 {
        margin:0 0 .6rem;
        font-size:clamp(2.2rem,5vw,3.1rem);
        letter-spacing:.5px;
      }
      .section-head p {
        margin:.3rem auto 0;
        max-width:780px;
        font-size:.95rem;
        line-height:1.45;
        color:var(--color-text-dim);
      }

      /* FEATURED */
      .featured {
        display:grid;
        gap:1.8rem;
        margin:0 0 3rem;
      }
      @media (min-width:900px){
        .featured {
          grid-template-columns: minmax(0,1fr) minmax(0,1fr);
          align-items:stretch;
        }
        .featured .media {
          margin:0;
          height:100%;
        }
      }

      .post-card {
        position:relative;
        display:flex;
        flex-direction:column;
        background:var(--color-bg-alt);
        border:1px solid var(--color-border);
        border-radius:var(--card-radius);
        padding:1.1rem 1.15rem 1.25rem;
        text-decoration:none;
        color:inherit;
        box-shadow:var(--shadow-sm,0 2px 4px rgba(0,0,0,.25));
        transition: border-color var(--transition), transform var(--transition), box-shadow var(--transition), background var(--transition);
        min-height:260px;
        isolation:isolate;
      }
      .post-card:hover,
      .post-card:focus-visible {
        border-color:var(--color-accent);
        box-shadow:var(--shadow-md,0 6px 18px -6px rgba(0,0,0,.55));
        transform:translateY(-3px);
        text-decoration:none;
      }

      .media {
        margin:-.4rem -0.4rem 1rem;
        border-radius:calc(var(--card-radius) - 4px);
        overflow:hidden;
        aspect-ratio:16/8;
        background:var(--color-surface-alt);
        border:1px solid var(--color-border);
        line-height:0;
      }
      .media img {
        width:100%; height:100%; object-fit:cover; display:block;
        transition: transform .6s ease;
      }
      .post-card:hover .media img { transform:scale(1.03); }

      .meta {
        display:flex;
        gap:.65rem;
        flex-wrap:wrap;
        font-size:.6rem;
        text-transform:uppercase;
        letter-spacing:.55px;
        font-weight:600;
        color:var(--color-text-dim);
        margin-bottom:.55rem;
      }

      .title {
        margin:0 0 .55rem;
        font-size:1.25rem;
        line-height:1.25;
        letter-spacing:.4px;
      }
      .featured .title {
        font-size:clamp(1.6rem,2.1vw,2rem);
      }

      .excerpt {
        margin:0 0 .9rem;
        font-size:.86rem;
        line-height:1.45;
        color:var(--color-text-dim);
        display:-webkit-box;
        -webkit-line-clamp:3;
        -webkit-box-orient:vertical;
        overflow:hidden;
      }
      .featured .excerpt {
        -webkit-line-clamp:4;
        font-size:.92rem;
      }

      .read-more {
        margin-top:auto;
        font-size:.65rem;
        letter-spacing:.7px;
        text-transform:uppercase;
        font-weight:600;
        color:var(--color-accent);
        display:inline-flex;
        align-items:center;
        gap:.35rem;
      }
      .read-more svg {
        width:14px; height:14px;
        stroke:currentColor; stroke-width:2; fill:none;
        transition:transform var(--transition);
      }
      .post-card:hover .read-more svg { transform:translateX(4px); }

      /* GRID */
      .grid {
        display:grid;
        gap:1.6rem;
        grid-template-columns:repeat(auto-fill,minmax(300px,1fr));
      }

      @media (max-width:640px){
        .post-card { padding:1rem .95rem 1.1rem; }
        .title { font-size:1.1rem; }
        .featured { margin-bottom:2.2rem; }
      }

      /* Focus ring */
      .post-card:focus-visible {
        outline:2px solid var(--color-accent);
        outline-offset:3px;
      }
    </style>
  </head>
  <body>
    <div id="scroll-progress"></div>
    <Header />
    <main class="blog">
      <header class="section-head" aria-labelledby="blog-heading">
        <h1 id="blog-heading">Insights &amp; Innovations: Engineering &amp; MLOps Chronicles</h1>
        <p>Deep dives into real‑time CV, reproducible pipelines, and scalable AI deployments—your front‑row seat to cutting‑edge engineering.</p>
      </header>

      {featured && (
        <section class="featured" aria-label="Featured post">
          <a class="post-card" href={`/blog/${featured.id}/`}>
            {featured.data.heroImage && (
              <div class="media">
                <Image
                  src={featured.data.heroImage}
                  width={900}
                  height={450}
                  alt={featured.data.title}
                  loading="eager"
                  decoding="async"
                />
              </div>
            )}
            <div class="meta">
              <time datetime={featured.data.pubDate.toISOString()}>
                <FormattedDate date={featured.data.pubDate} />
              </time>
              {featured.data.tags?.slice(0,2).map(t => <span>{t}</span>)}
            </div>
            <h2 class="title">{featured.data.title}</h2>
            { (featured.data.description || featured.data.excerpt) && (
              <p class="excerpt">
                {(featured.data.description || featured.data.excerpt)}
              </p>
            )}
            <span class="read-more">
              Read Article
              <svg viewBox="0 0 24 24" aria-hidden="true">
                <path d="M5 12h14M13 6l6 6-6 6" />
              </svg>
            </span>
          </a>
        </section>
      )}

      {rest.length > 0 && (
        <section aria-label="All posts">
          <ul class="grid" style="list-style:none; margin:0; padding:0;">
            {
              rest.map(p => {
                const url = `/blog/${p.id}/`;
                return (
                  <li>
                    <a class="post-card" href={url}>
                      {p.data.heroImage && (
                        <div class="media">
                          <Image
                            src={p.data.heroImage}
                            width={640}
                            height={320}
                            alt={p.data.title}
                            loading="lazy"
                            decoding="async"
                          />
                        </div>
                      )}
                      <div class="meta">
                        <time datetime={p.data.pubDate.toISOString()}>
                          <FormattedDate date={p.data.pubDate} />
                        </time>
                        {p.data.tags?.slice(0,2).map(t => <span>{t}</span>)}
                      </div>
                      <h3 class="title">{p.data.title}</h3>
                      {(p.data.description || p.data.excerpt) && (
                        <p class="excerpt">
                          {(p.data.description || p.data.excerpt)}
                        </p>
                      )}
                      <span class="read-more">
                        Read
                        <svg viewBox="0 0 24 24" aria-hidden="true">
                          <path d="M5 12h14M13 6l6 6-6 6" />
                        </svg>
                      </span>
                    </a>
                  </li>
                );
              })
            }
          </ul>
        </section>
      )}
    </main>
    <Footer />
  </body>
</html>

<script type="module">
  const bar = document.getElementById('progress-bar');
  document.addEventListener('scroll', () => {
    const pct = Math.min(
      window.scrollY / (document.body.scrollHeight - window.innerHeight),
      1
    );
    bar.style.transform = `scaleX(${pct})`;
  });
</script>