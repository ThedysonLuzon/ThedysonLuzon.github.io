---
import HeroIntro from "../components/HeroIntro.astro";
import ProjectCard from "../components/ProjectCard.astro";
import GitHubShowcase from "../components/GitHubShowcase.astro";
import CoreStack from "../components/CoreStack.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import "../styles/theme.css";
import { getCollection } from "astro:content";
import ResumeChat from "../components/ResumeChat";
import MagneticCTA from "../components/MagneticCTA.tsx";
import CoreStackMarquee from "../components/CoreStackMarquee.astro";
import VibrantBackdrop from "../components/lightswind/VibrantBackdrop.tsx";
import MissionEducation from "../components/MissionEducation.astro";
import BlogTeaser from "../components/BlogTeaser.astro";
import ContactShowcase from "../components/ContactShowcase.astro";

const projects = [
  {
    title: "SafeRoomAI",
    summary:
      "Real-time anomaly detection (YOLO + Autoencoder fallback) with reproducible pipeline.",
    stack: ["Python", "YOLOv8", "Autoencoder", "DVC", "MLflow", "BentoML", "K8s", "FastAPI"],
    highlights: [
      "Adaptive micro-batching & quantization",
      "Experiment lineage (DVC + MLflow)",
      "RTSP watchdog fallback to cached video",
    ],
    repo: "https://github.com/DC-Capstone1W25/SafeRoomAI",
    caseStudy: "/projects/saferoomai",
  },
  {
    title: "GreenEarthConnect",
    summary:
      "Sustainability analytics & community engagement platform for tracking eco-impact and fostering local environmental initiatives.",
    stack: ["TypeScript", "React", "Node.js", "Express", "GraphQL", "MongoDB", "Docker", "CI"],
    highlights: [
      "Modular service layer with typed GraphQL schema & strict lint gates",
      "Real-time contribution feed (websocket / subscription ready design)",
      "Optimized aggregations & indexed queries for activity / impact metrics",
    ],
    repo: "https://github.com/DC-Capstone1W25/greenearthconnect",
    caseStudy: "/projects/greenearthconnect",
  },
];

const posts = (await getCollection("blog"))
  .filter((p) => !p.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Thedyson Luzon – AI & MLOps Engineer</title>
    <meta
      name="description"
      content="AI & MLOps Engineer delivering real-time computer vision, reproducible ML pipelines, and cloud-native full-stack solutions."
    />
    <meta name="author" content="Thedyson Eduard Luzon" />
    <link rel="canonical" href="https://thedysonluzon.io/" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta property="og:title" content="Thedyson Luzon – AI & MLOps Engineer" />
    <meta
      property="og:description"
      content="Real-Time CV • Reproducible ML • Cloud-Native Full-Stack"
    />
    <meta property="og:image" content="/og-default.png" />
    <meta name="twitter:card" content="summary_large_image" />

    <!-- theme init -->
    <script>
      (function () {
        const stored = localStorage.getItem("theme");
        const prefersLight = window
          .matchMedia("(prefers-color-scheme: light)")
          .matches;
        document.documentElement.dataset.theme =
          stored || (prefersLight ? "light" : "dark");
      })();
    </script>
    <script src="https://code.iconify.design/2/2.1.2/iconify.min.js" defer></script>
  </head>
  <body>
    <div id="progress-bar"></div>

    <a href="#main" class="skip-link">Skip to content</a>

    <Header />
    <main id="main" class="main-container">
<section
  class="reveal hero-vibrant"
  data-scroll-section
  data-scroll-speed="1.2"
>
  <VibrantBackdrop client:load />
  <HeroIntro />
</section>

  <MissionEducation />


      <section 
          id="core-stack" 
          class="core-stack reveal" 
          data-scroll-section 
          data-scroll-speed="0.6"
        >
      <CoreStackMarquee />
      <div style="height:.6rem"></div>
      <CoreStack />
      </section>


      <section id="projects" class="section reveal" data-scroll-section 
          data-scroll-speed="0.8">
        <h2>Highlighted Projects</h2>
        <div class="projects-grid">
          {projects.map((p) => (
            <div class="tilt-card">
            <ProjectCard {...p} />
            </div>
          ))}
        </div>
      </section>

     <!--  <GitHubShowcase class="reveal"/> -->

      <BlogTeaser posts={posts} />

      <ContactShowcase />

      <ResumeChat client:load />
    </main>

    <Footer />

    <!-- theme toggle -->
    <script>
      const t = document.getElementById("theme-toggle");
      t?.addEventListener("click", () => {
        const root = document.documentElement;
        const next = root.dataset.theme === "light" ? "dark" : "light";
        root.dataset.theme = next;
        localStorage.setItem("theme", next);
      });
    </script>

    <script type="module">
  // identical to PageLayout’s observer
  const io = new IntersectionObserver(
    (entries, obs) => {
      for (let e of entries) {
        if (e.isIntersecting) {
          e.target.classList.add('visible');
          obs.unobserve(e.target);
        }
      }
    },
    { threshold: 0.1 }
  );
  document.querySelectorAll('.reveal').forEach(el => io.observe(el));
</script>
  <!-- scroll‐progress script -->
  <script type="module">
    const bar = document.getElementById('progress-bar');
    document.addEventListener('scroll', () => {
      const pct = Math.min(
        window.scrollY / (document.body.scrollHeight - window.innerHeight),
        1
      );
      bar.style.transform = `scaleX(${pct})`;
    });
  </script>
<script type="module">
  // graceful exit for reduced motion
  const prefersReduced = window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  if (!prefersReduced) {
    const clamp = (n, min, max) => Math.min(Math.max(n, min), max);
    const applyTilt = (el, e) => {
      const r = el.getBoundingClientRect();
      const cx = r.left + r.width / 2;
      const cy = r.top + r.height / 2;
      const dx = (e.clientX - cx) / (r.width / 2);
      const dy = (e.clientY - cy) / (r.height / 2);
      const rx = clamp(-dy * 8, -8, 8);
      const ry = clamp(dx * 10, -10, 10);
      el.style.transform = `perspective(900px) rotateX(${rx}deg) rotateY(${ry}deg) translateZ(8px)`;
      el.style.boxShadow = `0 12px 28px -10px rgba(0,0,0,.45)`;
    };
    const resetTilt = el => {
      el.style.transform = "perspective(900px) rotateX(0) rotateY(0) translateZ(0)";
      el.style.boxShadow = "";
    };

    const els = Array.from(document.querySelectorAll(".tilt-card"));
    els.forEach(el => {
      el.addEventListener("pointermove", e => applyTilt(el, e));
      el.addEventListener("pointerleave", () => resetTilt(el));
    });
  }
</script>

  </body>
</html>
