---
import type { CollectionEntry } from "astro:content";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import "../styles/theme.css";
import BaseHead from "../components/BaseHead.astro";
import ResumeChat from "../components/ResumeChat";


type BlogEntry = CollectionEntry<"blog">["data"];

interface Props extends BlogEntry {}

const { title, description, pubDate, updatedDate } = Astro.props as Props;

const isUpdated =
  updatedDate &&
  pubDate &&
  new Date(updatedDate).getTime() > new Date(pubDate).getTime();

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  description,
  datePublished: pubDate?.toISOString?.() || pubDate,
  ...(updatedDate
    ? { dateModified: updatedDate.toISOString?.() || updatedDate }
    : {}),
  author: { "@type": "Person", name: "Thedyson Eduard Luzon" }
};
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <BaseHead title={title} description={description} />
    <script type="application/ld+json">
      {JSON.stringify(jsonLd)}
    </script>
    <style>
      body {
        margin: 0;
        background: var(--color-bg);
        color: var(--color-text);
        font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
        line-height: 1.55;
      }
      main {
        margin: 0;
        padding: 0 1.1rem 4rem;
      }
      article {
        max-width: 780px;
        margin: 0 auto;
        padding-top: 1.2rem;
      }
      header.post-header {
        text-align: center;
        margin: 0 0 1.8rem;
      }
      header.post-header h1 {
        margin: 0 0 0.65rem;
        font-size: clamp(2rem, 5vw, 2.85rem);
        line-height: 1.1;
        letter-spacing: 0.5px;
      }
      .dates {
        font-size: 0.75rem;
        letter-spacing: 0.6px;
        text-transform: uppercase;
        font-weight: 500;
        color: var(--color-text-dim);
        display: flex;
        gap: 0.8rem;
        justify-content: center;
        flex-wrap: wrap;
        margin-bottom: 0.75rem;
      }
      .updated-badge {
        background: rgba(79, 70, 229, 0.15);
        color: var(--color-accent);
        padding: 0.25rem 0.55rem;
        border-radius: 999px;
        font-size: 0.6rem;
        letter-spacing: 0.7px;
        font-weight: 600;
      }
      hr {
        border: none;
        height: 1px;
        background: var(--color-border);
        margin: 1.4rem auto 0;
        width: 100%;
        max-width: 480px;
        opacity: 0.5;
      }
      .content {
        font-size: 1.02rem;
      }
      footer.post-footer {
        margin-top: 3rem;
        font-size: 0.75rem;
        text-align: center;
        opacity: 0.6;
      }
      :focus-visible {
        outline: 2px solid var(--color-accent);
        outline-offset: 2px;
      }
      @media (max-width: 820px) {
        article {
          padding-top: 0.6rem;
        }
        header.post-header h1 {
          font-size: clamp(1.9rem, 6vw, 2.5rem);
        }
      }
      @media print {
        body {
          background: #fff;
          color: #000;
        }
        header.site,
        .site-header,
        footer,
        #theme-toggle {
          display: none !important;
        }
      }
    </style>
  </head>

  <body>
    <div id="scroll-progress"></div>
    <Header />
    <main>
      <article
        aria-labelledby="post-title"
        itemScope
        itemType="https://schema.org/Article"
      >

        <header class="post-header">
          <div class="dates">
            <time
              dateTime={new Date(pubDate).toISOString()}
              itemProp="datePublished"
            >
              <FormattedDate date={pubDate} />
            </time>
            {isUpdated && (
              <span class="updated-badge">
                Updated{" "}
                <time
                  dateTime={new Date(updatedDate!).toISOString()}
                  itemProp="dateModified"
                >
                  <FormattedDate date={updatedDate!} />
                </time>
              </span>
            )}
          </div>
          <h1 id="post-title" itemProp="headline">{title}</h1>
          <hr />
        </header>

        <div class="content" itemProp="articleBody">
          <slot />
        </div>
      </article>
      <Footer />
    </main>
        <ResumeChat client:load />
  </body>
</html>

<script type="module">
  const bar = document.getElementById('progress-bar');
  document.addEventListener('scroll', () => {
    const pct = Math.min(
      window.scrollY / (document.body.scrollHeight - window.innerHeight),
      1
    );
    bar.style.transform = `scaleX(${pct})`;
  });
</script>
