---
import type { CollectionEntry } from "astro:content";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import "../styles/theme.css";
import BaseHead from "../components/BaseHead.astro";
import ResumeChat from "../components/ResumeChat";

type BlogEntry = CollectionEntry<"blog">["data"];
interface Props extends BlogEntry {}

const {
  title,
  description,
  pubDate,
  updatedDate,
  tags = [],
  heroImage,
} = Astro.props as Props & { tags?: string[]; heroImage?: any };

const isUpdated =
  updatedDate &&
  pubDate &&
  new Date(updatedDate).getTime() > new Date(pubDate).getTime();

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  description,
  datePublished: pubDate?.toISOString?.() || pubDate,
  ...(updatedDate ? { dateModified: updatedDate.toISOString?.() || updatedDate } : {}),
  author: { "@type": "Person", name: "Thedyson Eduard Luzon" }
};
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <BaseHead title={title} description={description} image={heroImage} />
    <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
    <style>
      :root {
        --wrap: 1180px;
        --post: 860px;
        --radius: 18px;
      }
      body {
        margin: 0;
        background: var(--color-bg);
        color: var(--color-text);
        font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
        line-height: 1.65;
      }
      main {
        margin: 0;
        padding: 0 1.1rem 4.6rem;
      }
      .post-wrap {
        max-width: var(--wrap);
        margin: 0 auto;
        display: grid;
        gap: 1.6rem;
      }

      /* HERO */
      .post-hero {
        position: relative;
        margin: 0;
        border-radius: calc(var(--radius) + 2px);
        overflow: hidden;
        border: 1px solid var(--color-border);
        background: var(--color-bg-alt);
        box-shadow: var(--shadow-sm);
        isolation: isolate;
      }
      .post-hero img {
        width: 100%;
        height: clamp(220px, 34vw, 420px);
        object-fit: cover;
        display: block;
        transform: translateZ(0);
      }
      .hero-overlay {
        position: absolute; inset: 0;
        background:
          linear-gradient(180deg, rgba(0,0,0,.25), rgba(0,0,0,0) 40%, rgba(0,0,0,.35));
        pointer-events: none;
      }

      /* HEADER */
      article {
        max-width: var(--post);
        margin: 0 auto;
        position: relative;
      }
      header.post-header {
        text-align: center;
        margin: 0 0 1.4rem;
        position: relative;
      }
      .title {
        margin: .15rem 0 .55rem;
        font-size: clamp(2rem, 4.8vw, 3rem);
        line-height: 1.08;
        letter-spacing: .4px;
        background: linear-gradient(90deg, #93c5fd, #a78bfa, #34d399);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        filter: saturate(1.05);
      }
      .hairline {
        height: 2px; width: 100%; max-width: 520px; margin: .7rem auto 0;
        border-radius: 999px;
        background: linear-gradient(90deg, #60a5fa, #a78bfa, #34d399, #60a5fa);
        background-size: 200% 100%;
        animation: hairline 6s linear infinite;
      }
      @keyframes hairline {
        0%{background-position:0% 50%} 100%{background-position:200% 50%}
      }

      .meta-row {
        margin: .35rem 0 .4rem;
        display: flex; gap: .65rem; justify-content: center; flex-wrap: wrap;
        font-size: .75rem; letter-spacing: .55px; text-transform: uppercase; font-weight: 600;
        color: var(--color-text-dim);
      }
      .updated-badge {
        background: rgba(79, 70, 229, 0.15);
        color: var(--color-accent);
        padding: 0.25rem 0.55rem;
        border-radius: 999px;
        font-size: 0.6rem;
        letter-spacing: 0.7px;
        font-weight: 700;
      }

      /* LAYOUT: TOC + CONTENT */
      .post-layout {
        display: grid;
        grid-template-columns: minmax(0,1fr);
        gap: 1.6rem;
      }
      @media (min-width: 1040px) {
        .post-layout {
          grid-template-columns: 240px minmax(0,1fr);
          align-items: start;
        }
      }

      .toc {
        position: sticky; top: 88px;
        border: 1px solid var(--color-border);
        background: var(--color-bg-alt);
        border-radius: 14px;
        padding: .85rem .9rem;
        box-shadow: var(--shadow-sm);
        max-height: calc(100vh - 120px);
        overflow: auto;
      }
      .toc h2 {
        margin: .1rem 0 .6rem;
        font-size: .78rem; letter-spacing: .6px; text-transform: uppercase; opacity: .8;
      }
      .toc ul { list-style: none; margin: 0; padding: 0; }
      .toc li { margin: .28rem 0; }
      .toc a {
        display: inline-block;
        font-size: .86rem; line-height: 1.25;
        color: var(--color-text); text-decoration: none; opacity: .85;
        border-left: 2px solid transparent; padding-left: .5rem;
        transition: color .18s ease, opacity .18s ease, border-color .18s ease, transform .18s ease;
      }
      .toc a:hover { color: var(--color-accent); opacity: 1; transform: translateX(2px); }
      .toc a.active { border-color: var(--color-accent); color: var(--color-accent); opacity: 1; }

      .content {
        font-size: 1.02rem;
        background: var(--color-bg);
      }
      .content :where(p, ul, ol, blockquote, pre, table) { margin: .95rem 0; }
      .content h2 { font-size: clamp(1.4rem, 3vw, 1.85rem); margin: 1.6rem 0 .6rem; }
      .content h3 { font-size: 1.15rem; margin: 1.25rem 0 .4rem; }
      .content blockquote {
        border-left: 3px solid var(--color-border);
        padding: .3rem .9rem; border-radius: 8px; background: var(--color-bg-alt); opacity: .95;
      }
      .content code:not(pre code) {
        background: var(--color-surface);
        border: 1px solid var(--color-border);
        padding: .06rem .35rem; border-radius: 6px; font-size: .93em;
      }
      .content pre {
        position: relative;
        background: #0b1020; border: 1px solid var(--color-border); border-radius: 14px;
        padding: .85rem 1rem; overflow: auto; box-shadow: var(--shadow-sm);
      }
      .copy-btn {
        position: absolute; top: .5rem; right: .5rem;
        font-size: .7rem; letter-spacing: .5px; font-weight: 700; text-transform: uppercase;
        border: 1px solid var(--color-border); background: var(--color-surface); color: var(--color-text);
        border-radius: 10px; padding: .35rem .55rem; cursor: pointer;
        transition: transform .18s ease, background .18s ease, color .18s ease, border-color .18s ease;
      }
      .copy-btn:hover { transform: translateY(-1px); color: var(--color-accent); border-color: var(--color-accent); }

      /* callouts */
      .callout { border: 1px solid var(--color-border); border-left: 4px solid var(--color-accent);
        background: var(--color-bg-alt); border-radius: 12px; padding: .8rem .95rem; }
      .callout.note { border-left-color: #22d3ee; }
      .callout.warn { border-left-color: #f59e0b; }

      /* tags + share */
      .post-meta-end {
        margin-top: 2rem;
        display: flex; flex-wrap: wrap; gap: .8rem 1rem; align-items: center; justify-content: space-between;
      }
      .tags { display: flex; gap: .5rem; flex-wrap: wrap; }
      .tag {
        font-size: .68rem; letter-spacing: .55px; text-transform: uppercase;
        padding: .35rem .55rem; border-radius: 999px;
        border: 1px solid var(--color-border); background: var(--color-bg-alt); opacity: .9;
      }

      /* reading progress */
      .read-progress {
        position: fixed; top: 0; left: 0; height: 3px; width: 100%;
        transform-origin: left center; transform: scaleX(0);
        background: linear-gradient(90deg, #60a5fa, #a78bfa, #34d399);
        z-index: 9999;
      }

      footer.post-footer {
        margin-top: 3rem;
        font-size: 0.78rem;
        text-align: center;
        opacity: 0.6;
      }

      :focus-visible { outline: 2px solid var(--color-accent); outline-offset: 2px; }

      @media (max-width: 1040px) {
        .toc { display: none; }
      }
      @media (max-width: 820px) {
        article { padding-top: .6rem; }
      }
      @media print {
        body { background: #fff; color: #000; }
        .site-header, footer, #theme-toggle, .read-progress { display: none !important; }
      }
    </style>
  </head>

  <body>
    <div class="read-progress" id="post-progress" aria-hidden="true"></div>
    <Header />
    <main>
      <div class="post-wrap">
        {heroImage && (
          <figure class="post-hero">
            <img src={typeof heroImage === 'string' ? heroImage : heroImage.src} alt={title} />
            <div class="hero-overlay" aria-hidden="true"></div>
          </figure>
        )}

        <article aria-labelledby="post-title" itemScope itemType="https://schema.org/Article">
          <header class="post-header">
            <div class="meta-row">
              <time dateTime={new Date(pubDate).toISOString()} itemProp="datePublished">
                <FormattedDate date={pubDate} />
              </time>
              {isUpdated && (
                <span class="updated-badge">
                  Updated{" "}
                  <time dateTime={new Date(updatedDate!).toISOString()} itemProp="dateModified">
                    <FormattedDate date={updatedDate!} />
                  </time>
                </span>
              )}
              <span id="readtime" aria-label="Estimated reading time"></span>
            </div>
            <h1 id="post-title" class="title" itemProp="headline">{title}</h1>
            <div class="hairline" aria-hidden="true"></div>
          </header>

          <div class="post-layout">
            <aside class="toc" aria-label="Table of contents">
              <h2>On this page</h2>
              <ul id="toc-list"></ul>
            </aside>

            <div class="content" itemProp="articleBody">
              <slot />
            <div class="post-meta-end">
              {Array.isArray(tags) && tags.length > 0 && (
                <div class="tags" aria-label="Tags">
                  {tags.map(t => <span class="tag">{t}</span>)}
                </div>
              )}
            </div>


              <footer class="post-footer">
                Enjoyed this? <a href="/#contact">Reach out</a> or browse the <a href="/blog">blog index</a>.
              </footer>
            </div>
          </div>
        </article>
      </div>
      <Footer />
    </main>
    <ResumeChat client:load />
  </body>
</html>

<script type="module">
  // Reading time (≈200wpm) + progress + TOC + copy buttons
  const content = document.querySelector(".content");
  const readOut = document.getElementById("readtime");
  const prog = document.getElementById("post-progress");
  const tocList = document.getElementById("toc-list");

  // reading time
  if (content && readOut) {
    const text = content.innerText || "";
    const words = text.trim().split(/\s+/).length;
    const mins = Math.max(1, Math.round(words / 200));
    readOut.textContent = `• ${mins} min read`;
  }

  // progress
  const onScroll = () => {
    const max = document.body.scrollHeight - window.innerHeight;
    const pct = Math.min(window.scrollY / Math.max(1, max), 1);
    if (prog) prog.style.transform = `scaleX(${pct})`;
  };
  document.addEventListener("scroll", onScroll, { passive: true });
  onScroll();

  // TOC build from h2/h3
  if (content && tocList) {
    const headers = Array.from(content.querySelectorAll("h2, h3")) as HTMLElement[];
    headers.forEach((h, idx) => {
      if (!h.id) h.id = "h-" + idx;
      const li = document.createElement("li");
      const a = document.createElement("a");
      a.href = "#" + h.id;
      a.textContent = h.textContent || "";
      if (h.tagName.toLowerCase() === "h3") a.style.marginLeft = ".65rem";
      li.appendChild(a);
      tocList.appendChild(li);
    });

    // scroll-spy
    const links = Array.from(tocList.querySelectorAll("a"));
    const io = new IntersectionObserver(
      (entries) => {
        for (const e of entries) {
          if (e.isIntersecting) {
            const id = "#" + (e.target as HTMLElement).id;
            links.forEach(l => l.classList.toggle("active", l.getAttribute("href") === id));
          }
        }
      },
      { rootMargin: "-40% 0px -55% 0px", threshold: [0, 1] }
    );
    headers.forEach(h => io.observe(h));
  }

  // copy buttons on code blocks
  if (content) {
    content.querySelectorAll("pre").forEach(pre => {
      const btn = document.createElement("button");
      btn.className = "copy-btn";
      btn.type = "button";
      btn.textContent = "Copy";
      btn.addEventListener("click", async () => {
        const code = pre.querySelector("code")?.textContent || "";
        try {
          await navigator.clipboard.writeText(code);
          btn.textContent = "Copied!";
          setTimeout(() => (btn.textContent = "Copy"), 1200);
        } catch {}
      });
      pre.appendChild(btn);
    });
  }

  // share links
  const url = location.href;
  const title = document.getElementById("post-title")?.textContent || "Blog";
  const x = document.getElementById("share-x");
  const ln = document.getElementById("share-ln");
  if (x) x.setAttribute("href", `https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(url)}`);
  if (ln) ln.setAttribute("href", `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`);
</script>
