---
export interface Props {
  metricsList?: Array<{label:string; value:string; note?:string}>;
}
const { metricsList = [] } = Astro.props;

const metrics = {
  fps: "24",
  p95ms: "85",
  iterBefore: "5 days",
  iterAfter: "6 hours",
  apiP95: "120",
  apiRps: "300",
  imgShrinkPct: "62",
  imgFrom: "1.3 GB",
  imgTo: "490 MB",
  errorRate: "0.4",
  uptime: "90.9"
};

function v(x){ return x || "—"; }
---
<section class="hero-intro" aria-labelledby="hero-name">
  <header class="hero-head">
    <h1 id="hero-name">Thedyson Eduard Luzon</h1>
    <p class="tagline">
      <strong>AI &amp; MLOps Engineer · Full‑Stack (MERN + GraphQL)</strong><br />
      Real‑Time Computer Vision • Reproducible ML Pipelines • Scalable Cloud Platforms<br />
      <span class="avail-badge" aria-label="Availability">Seeking Fall 2025 Internship</span>
    </p>
    <nav class="primary-cta" aria-label="Primary calls to action">
      <a class="btn primary" href="/resume.pdf" target="_blank" rel="noopener">Resume</a>
      <a class="btn" href="mailto:luzon.thedyson@gmail.com">Email</a>
      <a class="btn" href="https://www.linkedin.com/in/thedysonluzon/" target="_blank" rel="noopener">LinkedIn</a>
      <a class="btn" href="https://github.com/ThedysonLuzon" target="_blank" rel="noopener">GitHub</a>
    </nav>
    {metricsList.length > 0 && (
      <div class="metrics-row">
        {metricsList.map(m => (
          <div class="metric">
            <div class="metric-value">{m.value}</div>
            <div class="metric-label">{m.label}</div>
            {m.note && <div class="metric-note">{m.note}</div>}
          </div>
        ))}
      </div>
    )}
  </header>

  <section class="value" aria-labelledby="value-title">
    <h2 id="value-title" class="visually-hidden">Value Proposition</h2>
    <ul class="value-bullets">
      <li>Low‑latency real‑time CV (p95 &lt; {v(metrics.p95ms)} ms)</li>
      <li>Experiment cycle compression ({v(metrics.iterBefore)} → {v(metrics.iterAfter)})</li>
      <li>End‑to‑end reproducibility (data &amp; model versioning)</li>
      <li>Production ML APIs with robust observability</li>
      <li>Clear metric‑driven stakeholder communication</li>
    </ul>
  </section>

  <section class="impact" aria-labelledby="impact-title">
    <h2 id="impact-title" class="section-heading">Impact Highlights</h2>
    <table aria-describedby="impact-caption">
      <caption id="impact-caption">Selected engineering impact metrics and enabling approaches.</caption>
      <thead>
        <tr><th>Domain</th><th>Result</th><th>Stack</th><th>Approach</th></tr>
      </thead>
      <tbody>
        <tr>
          <td>Real‑Time Inference</td>
          <td>~{v(metrics.fps)} FPS, p95 {v(metrics.p95ms)} ms</td>
          <td>PyTorch · YOLOv8 · FastAPI</td>
          <td>Async batching, zero‑copy frames</td>
        </tr>
        <tr>
          <td>Experiment Velocity</td>
          <td>{v(metrics.iterBefore)} → {v(metrics.iterAfter)}</td>
          <td>DVC · MLflow</td>
          <td>Versioned data &amp; run tracking</td>
        </tr>
        <tr>
          <td>API Performance</td>
          <td>p95 {v(metrics.apiP95)} ms @ {v(metrics.apiRps)} rps</td>
          <td>FastAPI · Apollo</td>
          <td>Resolver batching &amp; caching</td>
        </tr>
        <tr>
          <td>Container Footprint</td>
          <td>↓ {v(metrics.imgShrinkPct)}% ({v(metrics.imgFrom)} → {v(metrics.imgTo)})</td>
          <td>Docker Multi‑Stage</td>
          <td>Layer pruning &amp; slimming</td>
        </tr>
        <tr>
          <td>Reliability</td>
          <td>Error &lt; {v(metrics.errorRate)}% / Uptime {v(metrics.uptime)}%</td>
          <td>K8s · Probes · Logs</td>
          <td>Liveness/readiness + struct. logs</td>
        </tr>
      </tbody>
    </table>
  </section>
</section>

<style>
.hero-intro { max-width:1120px; margin:0 auto 3.5rem; padding:2.5rem 1.2rem 0; }
.avail-badge {
  display:inline-block; margin-top:.4rem; background:rgba(79,70,229,.18);
  color:var(--accent); font-size:.65rem; letter-spacing:.6px;
  padding:.3rem .6rem; border-radius:999px; font-weight:600; text-transform:uppercase;
}
.metrics-row { display:flex; flex-wrap:wrap; gap:.8rem; justify-content:center; margin:1rem 0 0; }
.metric { background:#141b23; border:1px solid #27303b; border-radius:14px; padding:.75rem .9rem; min-width:128px; text-align:center; }
.metric-value { font-size:1.15rem; font-weight:600; color:var(--accent); }
.metric-label { font-size:.6rem; letter-spacing:.6px; opacity:.7; text-transform:uppercase; margin-top:.25rem; }
.metric-note { font-size:.55rem; opacity:.5; margin-top:.2rem; }
</style>
