---
import data from "../data/github.json";
import MetricCard from "./MetricCard.astro";

const repos = Array.isArray(data?.repos) ? data.repos : [];
const updated = data?.updated || null;
const contributions = Array.isArray(data?.contributions) ? data.contributions : [];

// Metrics
const totalStars = repos.reduce((s, r) => s + (typeof r?.stars === "number" ? r.stars : 0), 0);
const totalForks = repos.reduce((s, r) => s + (typeof r?.forks === "number" ? r.forks : 0), 0);
const repoCount = repos.length;

// Language frequency
const langCounts: Record<string, number> = {};
for (const r of repos) {
  if (r?.primaryLanguage) {
    langCounts[r.primaryLanguage] = (langCounts[r.primaryLanguage] || 0) + 1;
  }
}
const langs = Object.entries(langCounts).sort((a,b)=>b[1]-a[1]);
const topLangs = langs.slice(0,5);
const langTotal = Object.values(langCounts).reduce((a,b)=>a+b,0);

// Default sort = by stars desc
const sortedRepos = repos.slice().sort((a,b) => (b?.stars || 0) - (a?.stars || 0));

// Helpers
function fmtDate(d?: string) {
  if (!d) return null;
  try { return new Date(d).toLocaleDateString(undefined,{month:"short",day:"numeric",year:"numeric"}); }
  catch { return null; }
}
function avatarURL(owner?: string) {
  if (!owner) return null;
  return `https://avatars.githubusercontent.com/${owner}?s=80`;
}
function statusClass(s?: string) {
  const v = (s || "").toLowerCase();
  if (v === "merged") return "merged";
  if (v === "open") return "open";
  return "closed";
}
---

<section aria-labelledby="gh-heading" class="gh-section reveal">
  <!-- lightswind accents -->
  <div class="gh-accents" aria-hidden="true">
    <span class="beam a"></span>
    <span class="beam b"></span>
  </div>

  <!-- section header -->
  <header class="gh-head">
    <h2 id="gh-heading">GitHub Activity &amp; Repositories</h2>
    {updated && (
      <p class="updated">
        Snapshot: {new Date(updated).toLocaleDateString(undefined,{month:"short",day:"numeric",year:"numeric"})}
      </p>
    )}
    <!-- rainbow hairline -->
    <div class="hairline" aria-hidden="true"></div>
  </header>

  <!-- metric strip -->
  <div class="gh-metrics">
    <MetricCard label="Repositories" value={repoCount} />
    <MetricCard label="Stars" value={totalStars} />
    <MetricCard label="Forks" value={totalForks} />
  </div>

  <!-- language distribution -->
  {langTotal > 0 && (
    <div class="lang-wrap">
      <div class="lang-bar" role="img" aria-label="Language usage distribution">
        {langs.map(([lang,count]) => {
          const pct = Math.round((count / langTotal) * 100);
          return (
            <span class="seg" style={`--w:${pct}%`} title={`${lang} ${pct}%`}></span>
          );
        })}
      </div>
      <div class="lang-legend" aria-label="Top languages">
        {topLangs.map(([lang,count]) => (
          <span class="lang">
            {lang} <small>{count}</small>
          </span>
        ))}
      </div>
    </div>
  )}

  <!-- controls -->
  <div class="gh-controls" role="group" aria-label="Repository sort">
    <button class="sort active" data-key="stars">Sort by Stars</button>
    <button class="sort" data-key="updated">Sort by Updated</button>
    <a class="cta" href="https://github.com/ThedysonLuzon" target="_blank" rel="noopener">View on GitHub ↗</a>
  </div>

  <!-- repo grid -->
  {sortedRepos.length > 0 ? (
    <ul id="repoGrid" class="repo-grid" style="list-style:none; margin:0; padding:0;">
      {sortedRepos.map(r => {
        const pushedTs = r?.pushedAt ? +new Date(r.pushedAt) : 0;
        const stars = typeof r?.stars === "number" ? r.stars : 0;
        const forks = typeof r?.forks === "number" ? r.forks : 0;
        return (
          <li class="repo-card" data-stars={stars} data-updated={pushedTs}>
            <h3 class="repo-name">
              <a href={r.url} target="_blank" rel="noopener">
                {r.name}
              </a>
            </h3>
            {r.description && <p class="desc">{r.description}</p>}
            <p class="meta">
              {r.primaryLanguage && <span class="pill">{r.primaryLanguage}</span>}
              <span class="pill" aria-label={`${stars} stars`}>★ {stars}</span>
              {typeof r.forks === "number" && <span class="pill" aria-label={`${forks} forks`}>⑂ {forks}</span>}
            </p>
            {r.pushedAt && (
              <p class="pushed" title={new Date(r.pushedAt).toISOString()}>
                Updated: {new Date(r.pushedAt).toLocaleDateString(undefined,{month:"short",day:"numeric"})}
              </p>
            )}
          </li>
        );
      })}
    </ul>
  ) : (
    <p class="empty">No repositories found.</p>
  )}

  <!-- Contributions (as cards) -->
  {contributions.length > 0 && (
    <section class="contrib">
      <h3>Open Source Contributions</h3>
      <ul class="contrib-grid" style="list-style:none; margin:0; padding:0;">
        {contributions.map(c => {
          const parts = (c.repo || "").split("/");
          const owner = parts[0] || "";
          const repoName = parts[1] || c.repo || "";
          const avatar = avatarURL(owner);
          const when = fmtDate(c.date);
          const stClass = statusClass(c.status);
          return (
            <li class="contrib-card">
              <div class="topline" aria-hidden="true"></div>
              <div class="row">
                {avatar ? (
                  <img class="avatar" src={avatar} width="32" height="32" alt={`${owner} avatar`} loading="lazy" decoding="async" />
                ) : (
                  <div class="avatar placeholder" aria-hidden="true">↯</div>
                )}
                <div class="title">
                  <a href={c.url} target="_blank" rel="noopener" class="pr-link">
                    {owner}/{repoName} • PR #{c.pr}
                  </a>
                  <span class={`status ${stClass}`} aria-label={`Status: ${c.status || "unknown"}`}>
                    { (c.status || "merged").toString().toUpperCase() }
                  </span>
                </div>
              </div>

              <p class="pr-title">{c.title}</p>

              <div class="meta">
                {when && <span class="pill">{when}</span>}
                {c.impact && <span class="pill soft">{c.impact}</span>}
                <a class="pill link" href={c.url} target="_blank" rel="noopener">View PR ↗</a>
              </div>
            </li>
          );
        })}
      </ul>
    </section>
  )}
</section>

<style>
.gh-section {
  position: relative;
  margin-top: 3.6rem;
  padding: 1.2rem 1.1rem 1.4rem;
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  background: linear-gradient(to bottom, var(--color-bg-alt), var(--color-bg));
  overflow: hidden;
  box-shadow: var(--shadow-sm);
}

/* lightswind background beams */
.gh-accents { position:absolute; inset:-22% -10%; z-index:0; pointer-events:none; filter:saturate(1.1); }
.gh-accents .beam{
  position:absolute; inset:0;
  background: conic-gradient(from 0deg at 50% 50%,
    rgba(79,70,229,.45), rgba(6,182,212,.38), rgba(34,197,94,.38), rgba(79,70,229,.45));
  filter: blur(28px); opacity:.34; animation: gh-rot 46s linear infinite;
}
.gh-accents .beam.b{ transform: rotate(28deg) scale(1.06); opacity:.28; animation-duration: 58s; }
@keyframes gh-rot { to { transform: rotate(360deg); } }

/* header + rainbow hairline */
.gh-head { position:relative; z-index:1; text-align:center; }
.gh-head h2 { margin:.1rem 0 .25rem; font-size: clamp(1.6rem, 3.2vw, 2.2rem); letter-spacing:.5px; }
.updated { font-size:.65rem; opacity:.55; letter-spacing:.6px; text-transform:uppercase; margin:.1rem 0 .8rem; }
.hairline { height:2px; margin:.4rem auto 1rem; max-width: 820px; border-radius:999px;
  background: linear-gradient(90deg, #60a5fa, #a78bfa, #34d399, #60a5fa);
  background-size: 200% 100%; animation: hairline-move 6s linear infinite;
}
@keyframes hairline-move { 0%{background-position:0% 50%} 100%{background-position:200% 50%} }

/* metric strip */
.gh-metrics { position:relative; z-index:1; display:flex; gap:.65rem; flex-wrap:wrap; justify-content:center; margin:0 0 .9rem; }

/* language distribution */
.lang-wrap { position:relative; z-index:1; margin: .2rem 0 1.1rem; }
.lang-bar { height:10px; border-radius:999px; overflow:hidden; border:1px solid var(--color-border);
  background: var(--color-surface); display:flex; }
.lang-bar .seg { flex:0 0 auto; width: var(--w); }
.lang-bar .seg:nth-child(6n+1){ background:#60a5fa; }
.lang-bar .seg:nth-child(6n+2){ background:#a78bfa; }
.lang-bar .seg:nth-child(6n+3){ background:#34d399; }
.lang-bar .seg:nth-child(6n+4){ background:#fbbf24; }
.lang-bar .seg:nth-child(6n+5){ background:#f472b6; }
.lang-bar .seg:nth-child(6n+6){ background:#22d3ee; }
.lang-legend { display:flex; flex-wrap:wrap; gap:.5rem; justify-content:center; margin:.55rem 0 0; }
.lang { background:var(--color-surface); padding:.45rem .7rem; border:1px solid var(--color-border-soft);
  border-radius:24px; font-size:.7rem; letter-spacing:.5px; display:inline-flex; gap:.4rem; align-items:center; color:var(--color-text); }

/* controls */
.gh-controls { position:relative; z-index:1; display:flex; gap:.6rem; flex-wrap:wrap; align-items:center; justify-content:center; margin:.2rem 0 1rem; }
.sort { padding:.5rem .8rem; border-radius:9999px; border:1px solid var(--color-border); background: var(--color-bg); color: var(--color-text);
  font-weight:700; letter-spacing:.3px; cursor:pointer; transition: transform .15s ease, border-color .15s ease, color .15s ease, background .15s ease; }
.sort:hover, .sort:focus-visible { transform: translateY(-1px); border-color: var(--color-accent); color: var(--color-accent); }
.sort.active { border-color: var(--color-accent); color: var(--color-accent); box-shadow: var(--shadow-sm); }
.cta { text-decoration:none; padding:.5rem .85rem; border-radius:9999px; background: var(--color-accent); color:#fff; font-weight:700; letter-spacing:.35px;
  border:1px solid var(--color-accent); box-shadow: 0 10px 28px -14px rgba(79,70,229,.6); }
.cta:hover, .cta:focus-visible { filter:brightness(1.08); transform: translateY(-1px); }

/* repo grid + cards */
.repo-grid { position:relative; z-index:1; display:grid; gap:1rem; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); }
.repo-card {
  background:var(--color-surface); border:1px solid var(--color-border); border-radius:14px; padding:1rem;
  display:flex; flex-direction:column; gap:.45rem; transition: transform .18s ease, border-color .18s ease, box-shadow .18s ease;
  box-shadow: var(--shadow-sm); isolation:isolate; position:relative; overflow:hidden;
}
.repo-card::before { content:""; position:absolute; left:10px; right:10px; top:0; height:2px; border-radius:999px;
  background:linear-gradient(90deg, transparent, color-mix(in srgb, var(--color-accent) 80%, transparent), transparent); opacity:.9; }
.repo-card:hover { transform: translateY(-2px); border-color: color-mix(in srgb, var(--color-accent) 45%, var(--color-border)); box-shadow: var(--shadow-md); }
.repo-name { margin:0; font-size:1rem; letter-spacing:.3px; }
.repo-name a { color:var(--color-text); text-decoration:none; }
.repo-name a:hover { color:var(--color-accent); text-decoration:underline; }
.desc { font-size:.78rem; line-height:1.3; opacity:.88; margin:0; }
.meta { display:flex; flex-wrap:wrap; gap:.4rem; margin:.2rem 0 0; font-size:.63rem; }
.pill { background:var(--color-surface-alt); padding:.25rem .45rem; border-radius:6px; border:1px solid var(--color-border); color:var(--color-text); }
.pushed { margin:0; font-size:.6rem; opacity:.55; }
.empty { font-size:.75rem; opacity:.6; font-style:italic; }

/* contributions cards */
.contrib { position:relative; z-index:1; margin-top: 2rem; }
.contrib h3 { margin:0 0 .8rem; font-size:1.05rem; }
.contrib-grid { display:grid; gap:1rem; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); }

.contrib-card {
  background:var(--color-surface); border:1px solid var(--color-border); border-radius:14px; padding:.9rem 1rem 1rem;
  display:flex; flex-direction:column; gap:.5rem; box-shadow: var(--shadow-sm); position:relative; overflow:hidden; isolation:isolate;
  transition: transform .18s ease, border-color .18s ease, box-shadow .18s ease;
}
.contrib-card:hover { transform: translateY(-2px); border-color: color-mix(in srgb, var(--color-accent) 45%, var(--color-border)); box-shadow: var(--shadow-md); }
.contrib-card .topline { content:""; position:absolute; left:10px; right:10px; top:0; height:2px; border-radius:999px;
  background:linear-gradient(90deg, transparent, color-mix(in srgb, var(--color-accent) 80%, transparent), transparent); opacity:.9; }
.contrib-card .row { display:flex; align-items:center; gap:.6rem; }
.avatar { width:32px; height:32px; border-radius:999px; border:1px solid var(--color-border); background:var(--color-bg-alt); object-fit:cover; }
.avatar.placeholder { display:grid; place-items:center; font-size:.85rem; opacity:.7; }
.title { display:flex; align-items:center; gap:.5rem; flex-wrap:wrap; }
.pr-link { font-weight:700; color:var(--color-text); text-decoration:none; }
.pr-link:hover { color:var(--color-accent); text-decoration:underline; }
.status { font-size:.6rem; padding:.22rem .5rem; border-radius:9999px; letter-spacing:.45px; border:1px solid var(--color-border); }
.status.merged { background: rgba(34,197,94,.15); color: #34d399; border-color: color-mix(in srgb,#34d399 45%, var(--color-border)); }
.status.open { background: rgba(96,165,250,.15); color:#60a5fa; border-color: color-mix(in srgb,#60a5fa 45%, var(--color-border)); }
.status.closed { background: rgba(244,114,182,.15); color:#f472b6; border-color: color-mix(in srgb,#f472b6 45%, var(--color-border)); }

.pr-title { margin:0; font-size:.82rem; line-height:1.35; opacity:.9; }
.contrib-card .meta { display:flex; flex-wrap:wrap; gap:.4rem; margin:.1rem 0 0; font-size:.63rem; }
.pill.soft { opacity:.85; }
.pill.link { text-decoration:none; }
.pill.link:hover { color: var(--color-accent); border-color: var(--color-accent); }

@media (max-width:600px){
  .repo-grid, .contrib-grid { grid-template-columns:1fr; }
}
@media (prefers-reduced-motion: reduce){
  .gh-accents .beam { animation: none !important; }
  .hairline { animation: none !important; }
}
</style>

<!-- client-side sort (no framework needed) -->
<script type="module">
  const grid = document.getElementById('repoGrid');
  const controls = document.querySelectorAll('.gh-controls .sort');
  if (grid && controls.length) {
    const sort = (key) => {
      const items = Array.from(grid.children);
      items.sort((a, b) => {
        const av = Number(a.getAttribute('data-' + key)) || 0;
        const bv = Number(b.getAttribute('data-' + key)) || 0;
        return bv - av;
      });
      items.forEach(el => grid.appendChild(el));
    };
    controls.forEach(btn => {
      btn.addEventListener('click', () => {
        controls.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        const key = btn.getAttribute('data-key');
        sort(key);
      });
    });
  }
</script>
