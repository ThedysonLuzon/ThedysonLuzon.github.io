---
/**
 * BaseHead.astro
 * Unified, robust head component for pages/posts.
 *
 * Props:
 *  - title: string
 *  - description: string
 *  - image?: ImageMetadata | string
 */

import "../styles/theme.css"; // ensure theme variables loaded early
import { SITE_TITLE } from "../consts";
import FallbackImage from "../assets/blog-placeholder-1.jpg";
import type { ImageMetadata } from "astro";

interface Props {
  title?: string;
  description?: string;
  image?: ImageMetadata | string;
}

const props = Astro.props as Props;

// Site & Canonical Logic
const CONFIG_SITE =
  (import.meta.env.SITE as string | undefined) ||
  (Astro.site ? String(Astro.site) : undefined);
const SITE = CONFIG_SITE || "https://thedysonluzon.github.io";
const path = Astro.url?.pathname || "/";
function normalizeUrl(base: string, p: string) {
  const u = new URL(p.replace(/\/{2,}/g, "/"), base);
  if (u.pathname !== "/" && u.pathname.endsWith("/")) {
    u.pathname = u.pathname.replace(/\/+$/, "");
  }
  return u.toString();
}
const canonical = normalizeUrl(SITE, path);

// Title & Description 
const title = props.title?.trim() || SITE_TITLE || "Untitled";
const description =
  props.description?.trim() ||
  "Portfolio and blog of Thedyson Luzon – AI & MLOps Engineer focusing on real‑time computer vision, reproducible ML pipelines, and cloud solutions.";

// Image Handling
const rawImage = props.image || FallbackImage;
function toAbsoluteImageURL(img: ImageMetadata | string): string {
  if (typeof img === "object" && "src" in img) {
    const src = (img as ImageMetadata).src;
    if (/^https?:\/\//i.test(src)) return src;
    return new URL(src, SITE).toString();
  }
  if (typeof img === "string") {
    if (/^https?:\/\//i.test(img)) return img;
    return new URL(img.startsWith("/") ? img : `/${img}`, SITE).toString();
  }
  return new URL("/og-default.png", SITE).toString();
}
const imageURL = toAbsoluteImageURL(rawImage);

// RSS URL
let rssUrl: string | null = null;
try {
  rssUrl = new URL("rss.xml", SITE).toString();
} catch {
  rssUrl = null;
}

// Dev guard
if (import.meta.env.DEV && !CONFIG_SITE) {
  console.warn(
    "[BaseHead] SITE / astro.config.mjs 'site' not configured; canonical and OG URLs using fallback:",
    SITE
  );
}
---

<head>
  <!--  Theme init: pick stored or system preference BEFORE any CSS loads  -->
  <script>
    (function() {
      const stored = localStorage.getItem('theme');
      const prefersLight = window.matchMedia('(prefers-color-scheme: light)')
        .matches;
      document.documentElement.dataset.theme =
        stored || (prefersLight ? 'light' : 'dark');
    })();
  </script>
  <script src="https://code.iconify.design/2/2.1.2/iconify.min.js" defer></script>

  <!-- Core Document Meta -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="canonical" href={canonical} />
  <meta name="robots" content="index,follow" />
  <meta
    name="theme-color"
    content="#4f46e5"
    media="(prefers-color-scheme: light)"
  />
  <meta
    name="theme-color"
    content="#0d1117"
    media="(prefers-color-scheme: dark)"
  />

  <!-- Preloads (fonts) -->
  <link
    rel="preload"
    href="/fonts/atkinson-regular.woff"
    as="font"
    type="font/woff"
    crossorigin
  />
  <link
    rel="preload"
    href="/fonts/atkinson-bold.woff"
    as="font"
    type="font/woff"
    crossorigin
  />

  {rssUrl && (
    <link
      rel="alternate"
      type="application/rss+xml"
      title={SITE_TITLE}
      href={rssUrl}
    />
  )}

  <!-- Primary Meta -->
  <title>{title}</title>
  <meta name="title" content={title} />
  <meta name="description" content={description} />

  <!-- Open Graph -->
  <meta property="og:type" content="website" />
  <meta property="og:site_name" content={SITE_TITLE} />
  <meta property="og:url" content={canonical} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={imageURL} />
  <meta
    property="og:image:alt"
    content={`Preview image for ${title}`}
  />

  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:url" content={canonical} />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:image" content={imageURL} />
  <meta
    name="twitter:image:alt"
    content={`Preview image for ${title}`}
  />

  <!-- Generator -->
  <meta name="generator" content={Astro.generator} />

<!-- Theme toggle handler (binds to any [data-theme-toggle]) -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const apply = (next) => {
      const root = document.documentElement;
      root.dataset.theme = next;
      localStorage.setItem("theme", next);
      window.dispatchEvent(new CustomEvent("theme-changed", { detail: { theme: next }}));
    };

    const toggle = () => {
      const root = document.documentElement;
      const next = root.dataset.theme === "light" ? "dark" : "light";
      apply(next);
    };

    document.querySelectorAll("[data-theme-toggle]").forEach(btn => {
      btn.addEventListener("click", toggle);
    });
  });
</script>

</head>
