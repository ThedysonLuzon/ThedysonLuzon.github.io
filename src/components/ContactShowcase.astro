---
import MagneticCTA from "./MagneticCTA.tsx";
const EMAIL = "luzon.thedyson@gmail.com";
const SUBJECT = "Interest in AI / MLOps Role";
const mailto = `mailto:${EMAIL}?subject=${encodeURIComponent(SUBJECT)}`;
---

<section id="contact" class="contact-showcase reveal" aria-labelledby="contact-heading">
  <!-- Lightswind glow + sparkles -->
  <div class="cs-accents" aria-hidden="true">
    <span class="beam a"></span>
    <span class="beam b"></span>
    <div class="sparkles"></div>
  </div>

  <header class="cs-head">
    <h2 id="contact-heading">Let’s build something great</h2>
    <p class="sub">
      Hiring for AI, MLOps, or full-stack? I ship reliable systems—let’s talk outcomes, not buzzwords.
    </p>
    <div class="hairline" aria-hidden="true"></div>
  </header>

  <div class="cta-row">
    <!-- Primary: magnetic email -->
    <MagneticCTA client:load href={mailto} class="cta-primary">
      Email Me (Request Resume)
    </MagneticCTA>

    <!-- Secondary: copy email (confetti) -->
    <button type="button" id="copy-email" class="chip action">
      <span class="iconify" data-icon="mdi:content-copy" aria-hidden="true"></span>
      <span>Copy Email</span>
    </button>

    <!-- LinkedIn -->
    <a class="chip link" href="https://www.linkedin.com/in/thedysonluzon/" target="_blank" rel="noopener" aria-label="LinkedIn">
      <span class="iconify" data-icon="mdi:linkedin" aria-hidden="true"></span>
      <span>LinkedIn</span>
    </a>

    <!-- GitHub -->
    <a class="chip link" href="https://github.com/ThedysonLuzon" target="_blank" rel="noopener" aria-label="GitHub">
      <span class="iconify" data-icon="mdi:github" aria-hidden="true"></span>
      <span>GitHub</span>
    </a>
  </div>

  <div class="info-grid" role="list">
    <div class="info-card" role="listitem">
      <div class="label">Email</div>
      <div class="value">{EMAIL}</div>
      <div class="note">I usually reply within 24 hours.</div>
    </div>
    <div class="info-card" role="listitem">
      <div class="label">Based in</div>
      <div class="value">Toronto (ET)</div>
      <div class="note">Remote-friendly • async-first</div>
    </div>
    <div class="info-card" role="listitem">
      <div class="label">Open to</div>
      <div class="value">AI / MLOps / Full-Stack</div>
      <div class="note">Contract • Full-time • Co-op</div>
    </div>
  </div>

  <p class="resume-note">* Full resume supplied on request to protect distribution.</p>
</section>

<style>
.contact-showcase{
  position:relative; margin-top:3.8rem; padding:1.25rem 1.1rem 1.5rem;
  border:1px solid var(--color-border); border-radius:var(--radius-lg);
  background: linear-gradient(to bottom, var(--color-bg-alt), var(--color-bg));
  overflow:hidden; box-shadow: var(--shadow-sm);
}

/* lightswind conic beams + sparkles */
.cs-accents{ position:absolute; inset:-22% -10%; z-index:0; pointer-events:none; filter:saturate(1.05); }
.cs-accents .beam{
  position:absolute; inset:0;
  background: conic-gradient(from 0deg at 50% 50%,
    rgba(79,70,229,.42), rgba(6,182,212,.32), rgba(34,197,94,.32), rgba(79,70,229,.42));
  filter: blur(28px); opacity:.32; animation: cs-rot 52s linear infinite;
}
.cs-accents .beam.b{ transform: rotate(28deg) scale(1.05); opacity:.26; animation-duration: 64s; }
@keyframes cs-rot { to { transform: rotate(360deg); } }

/* Sparkles (gentle bokeh dots) */
.sparkles{
  position:absolute; inset:0;
  background:
    radial-gradient(6px 6px at 20% 30%, rgba(255,255,255,.12), transparent 60%),
    radial-gradient(5px 5px at 70% 60%, rgba(255,255,255,.10), transparent 60%),
    radial-gradient(4px 4px at 40% 80%, rgba(255,255,255,.10), transparent 60%),
    radial-gradient(3px 3px at 85% 25%, rgba(255,255,255,.12), transparent 60%);
  filter: blur(0.2px);
  animation: twinkle 5.5s ease-in-out infinite alternate;
  opacity:.45;
}
@keyframes twinkle {
  from { transform: translateY(0px); opacity:.35; }
  to   { transform: translateY(-6px); opacity:.55; }
}

/* header */
.cs-head{ position:relative; z-index:1; text-align:center; }
.cs-head h2{ margin:.1rem 0 .25rem; font-size: clamp(1.65rem, 3.2vw, 2.25rem); letter-spacing:.5px; }
.cs-head .sub{ margin:0 auto .75rem; max-width:760px; opacity:.78; font-size:.96rem; }
.hairline{
  height:2px; margin:.4rem auto 1rem; max-width: 920px; border-radius:999px;
  background: linear-gradient(90deg, #60a5fa, #a78bfa, #34d399, #60a5fa);
  background-size:200% 100%; animation: hairline-move 6s linear infinite;
}
@keyframes hairline-move { 0%{background-position:0% 50%} 100%{background-position:200% 50%} }

/* ctas */
.cta-row{
  position:relative; z-index:1;
  display:flex; flex-wrap:wrap; gap:.6rem; justify-content:center;
  margin:.2rem 0 1rem;
}

.chip{
  display:inline-flex; align-items:center; gap:.45rem;
  padding:.6rem .9rem; border-radius:9999px;
  background: var(--color-surface); color: var(--color-text);
  border:1px solid var(--color-border); text-decoration:none; font-weight:700;
  letter-spacing:.35px; font-size:.8rem; box-shadow: var(--shadow-sm);
  transition: transform .18s ease, border-color .18s ease, color .18s ease, background .18s ease;
}
.chip:hover, .chip:focus-visible{ transform: translateY(-1px); border-color: var(--color-accent); color: var(--color-accent); }
.chip.action{ cursor: pointer; }
.cta-primary { /* inherits MagneticCTA styling; keep spacing consistent */ }

.iconify{ font-size:1rem; }

/* info cards */
.info-grid{
  position:relative; z-index:1;
  display:grid; gap:.9rem; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  margin:.4rem 0 0;
}
.info-card{
  background:var(--color-surface); border:1px solid var(--color-border);
  border-radius:14px; padding:.85rem .95rem; box-shadow: var(--shadow-sm);
  transition: border-color .2s ease, transform .2s ease;
}
.info-card:hover{ border-color: color-mix(in srgb, var(--color-accent) 45%, var(--color-border)); transform: translateY(-2px); }
.label{ font-size:.65rem; text-transform:uppercase; letter-spacing:.55px; opacity:.7; }
.value{ font-size:1.05rem; font-weight:700; margin-top:.15rem; }
.note{ font-size:.7rem; opacity:.6; margin-top:.3rem; }

/* resume note */
.resume-note{ text-align:center; opacity:.6; margin:.9rem 0 0; font-size:.75rem; }

@media (max-width: 640px){
  .value{ font-size:1rem; }
}
@media (prefers-reduced-motion: reduce){
  .cs-accents .beam, .hairline, .sparkles { animation: none !important; }
}
</style>

<!-- Copy + confetti -->
<script type="module">
  const btn = document.getElementById('copy-email');
  const email = ${JSON.stringify(EMAIL)};
  const prefersReduced = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

  function burstConfetti(target){
    if (prefersReduced) return;
    const rect = target.getBoundingClientRect();
    const root = document.createElement('div');
    root.style.position = 'fixed';
    root.style.left = rect.left + rect.width/2 + 'px';
    root.style.top = rect.top + rect.height/2 + 'px';
    root.style.pointerEvents = 'none';
    root.style.zIndex = '9999';
    document.body.appendChild(root);

    const N = 16;
    for (let i=0;i<N;i++){
      const p = document.createElement('span');
      p.className = 'confetti';
      p.style.position='absolute';
      p.style.width='6px'; p.style.height='10px';
      p.style.background = `hsl(${Math.floor(Math.random()*360)} 85% 60%)`;
      p.style.transform = `translate(-50%,-50%) rotate(${Math.random()*360}deg)`;
      p.style.borderRadius='2px';
      root.appendChild(p);

      const angle = (Math.PI*2) * (i/N);
      const dist = 60 + Math.random()*40;
      const dx = Math.cos(angle)*dist;
      const dy = Math.sin(angle)*dist;
      p.animate(
        [
          { transform: `translate(-50%,-50%)`, opacity: 1 },
          { transform: `translate(${dx-50}%, ${dy-50}%) rotate(${360*Math.random()}deg)`, opacity: 0 }
        ],
        { duration: 800 + Math.random()*400, easing: 'cubic-bezier(.2,.7,.2,1)', fill:'forwards' }
      );
    }
    setTimeout(() => root.remove(), 1200);
  }

  btn?.addEventListener('click', async () => {
    try {
      await navigator.clipboard.writeText(email);
      btn.classList.add('ok');
      btn.innerHTML = '<span class="iconify" data-icon="mdi:check-bold"></span><span>Copied!</span>';
      burstConfetti(btn);
      setTimeout(() => {
        btn.classList.remove('ok');
        btn.innerHTML = '<span class="iconify" data-icon="mdi:content-copy"></span><span>Copy Email</span>';
      }, 1400);
    } catch (e) {
      // Fallback: select+copy via prompt
      window.prompt('Copy email address:', email);
    }
  });
</script>
